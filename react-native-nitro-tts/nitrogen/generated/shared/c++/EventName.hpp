///
/// EventName.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::nitrotexttospeech {

  /**
   * An enum which can be represented as a JavaScript union (EventName).
   */
  enum class EventName {
    WORD      SWIFT_NAME(word) = 0,
    FINISH      SWIFT_NAME(finish) = 1,
    START      SWIFT_NAME(start) = 2,
  } CLOSED_ENUM;

} // namespace margelo::nitro::nitrotexttospeech

namespace margelo::nitro {

  using namespace margelo::nitro::nitrotexttospeech;

  // C++ EventName <> JS EventName (union)
  template <>
  struct JSIConverter<EventName> {
    static inline EventName fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("word"): return EventName::WORD;
        case hashString("finish"): return EventName::FINISH;
        case hashString("start"): return EventName::START;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum EventName - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, EventName arg) {
      switch (arg) {
        case EventName::WORD: return JSIConverter<std::string>::toJSI(runtime, "word");
        case EventName::FINISH: return JSIConverter<std::string>::toJSI(runtime, "finish");
        case EventName::START: return JSIConverter<std::string>::toJSI(runtime, "start");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert EventName to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("word"):
        case hashString("finish"):
        case hashString("start"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
