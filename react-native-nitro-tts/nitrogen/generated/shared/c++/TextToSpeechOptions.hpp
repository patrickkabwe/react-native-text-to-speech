///
/// TextToSpeechOptions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <optional>
#include <string>

namespace margelo::nitro::nitrotexttospeech {

  /**
   * A struct which can be represented as a JavaScript object (TextToSpeechOptions).
   */
  struct TextToSpeechOptions {
  public:
    std::optional<std::string> voiceIdentifier     SWIFT_PRIVATE;
    std::optional<double> rate     SWIFT_PRIVATE;
    std::optional<double> pitch     SWIFT_PRIVATE;
    std::optional<double> postUtteranceDelay     SWIFT_PRIVATE;
    std::optional<double> preUtteranceDelay     SWIFT_PRIVATE;
    std::optional<double> volume     SWIFT_PRIVATE;

  public:
    explicit TextToSpeechOptions(std::optional<std::string> voiceIdentifier, std::optional<double> rate, std::optional<double> pitch, std::optional<double> postUtteranceDelay, std::optional<double> preUtteranceDelay, std::optional<double> volume): voiceIdentifier(voiceIdentifier), rate(rate), pitch(pitch), postUtteranceDelay(postUtteranceDelay), preUtteranceDelay(preUtteranceDelay), volume(volume) {}
  };

} // namespace margelo::nitro::nitrotexttospeech

namespace margelo::nitro {

  using namespace margelo::nitro::nitrotexttospeech;

  // C++ TextToSpeechOptions <> JS TextToSpeechOptions (object)
  template <>
  struct JSIConverter<TextToSpeechOptions> {
    static inline TextToSpeechOptions fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return TextToSpeechOptions(
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "voiceIdentifier")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "rate")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "pitch")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "postUtteranceDelay")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "preUtteranceDelay")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "volume"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const TextToSpeechOptions& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "voiceIdentifier", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.voiceIdentifier));
      obj.setProperty(runtime, "rate", JSIConverter<std::optional<double>>::toJSI(runtime, arg.rate));
      obj.setProperty(runtime, "pitch", JSIConverter<std::optional<double>>::toJSI(runtime, arg.pitch));
      obj.setProperty(runtime, "postUtteranceDelay", JSIConverter<std::optional<double>>::toJSI(runtime, arg.postUtteranceDelay));
      obj.setProperty(runtime, "preUtteranceDelay", JSIConverter<std::optional<double>>::toJSI(runtime, arg.preUtteranceDelay));
      obj.setProperty(runtime, "volume", JSIConverter<std::optional<double>>::toJSI(runtime, arg.volume));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "voiceIdentifier"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "rate"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "pitch"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "postUtteranceDelay"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "preUtteranceDelay"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "volume"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
